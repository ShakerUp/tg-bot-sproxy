import ProxyModel from '../db/models/ProxyModel.js';
import testProxy from '../bot/utils/proxyCheck.js';

import { formatter } from '../callbacks.js';
import checkAuth from '../db/middleware/checkAuth.js';

export async function handleMyProxies(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const telegramId = callbackQuery.from.id;

  try {
    const result = await checkAuth(telegramId, ['admin', 'user']);
    if (result.permission) {
      const userProxies = await ProxyModel.find({ userTelegramId: telegramId });

      let proxiesMessage;
      if (userProxies.length > 0) {
        proxiesMessage = '<b>üîó –í–∞—à–∏ –ø—Ä–æ–∫—Å–∏: üîó</b>\n\n';
        userProxies.forEach((proxy, index) => {
          proxiesMessage += `<b>–ü—Ä–æ–∫—Å–∏ ‚Ññ${index + 1}:</b>\n`;
          proxiesMessage += `Host: ${proxy.hostIp}\n`;
          proxiesMessage += `Socks –ø–æ—Ä—Ç: ${proxy.socksPort}\n`;
          proxiesMessage += `HTTP –ø–æ—Ä—Ç: ${proxy.httpPort}\n`;
          proxiesMessage += `–õ–æ–≥–∏–Ω: ${proxy.login}\n`;
          proxiesMessage += `–ü–∞—Ä–æ–ª—å: ${proxy.password}\n`;
          proxiesMessage += `–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–º–µ–Ω—ã IP: <code>${proxy.changeIpUrl}</code>\n`;
          proxiesMessage += `–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${formatter.format(proxy.expirationDate)}\n\n`;
        });
      } else {
        proxiesMessage = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏.';
      }

      const proxiesOptions = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üí≥ –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏', callback_data: 'buy_proxies' },
              // { text: '‚úçÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∫—Å–∏', callback_data: 'check_proxy' },
            ],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'login_or_register' }],
          ],
        },
      };

      bot.editMessageText(proxiesMessage, {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        ...proxiesOptions,
      });
    } else {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export const handleBuyProxies = async (bot, callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
    const availableProxiesCount = await ProxyModel.countDocuments({ isFree: true });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö —á–∏—Å–ª–∞
    const proxiesCountMessage =
      availableProxiesCount > 0
        ? `<b>${availableProxiesCount}</b>`
        : `<b>‚ùóÔ∏è${availableProxiesCount}</b>`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '7 –¥–Ω–µ–π (8$)', callback_data: 'rent_7_days' },
          { text: '30 –¥–Ω–µ–π (25$)', callback_data: 'rent_30_days' },
        ],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'my_proxies' }],
      ],
    };

    bot.editMessageText(
      `–í –Ω–∞–ª–∏—á–∏–∏ ${proxiesCountMessage} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∞—Ä–µ–Ω–¥—ã:`,
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: keyboard,
      },
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏:', err.message);
    bot.editMessageText(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–∫—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
      },
    );
  }
};

export async function checkProxy(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const telegramId = callbackQuery.from.id;
  const messageId = callbackQuery.message.message_id; // –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

  try {
    const userProxies = await ProxyModel.find({ userId: telegramId });

    let message = '';
    if (userProxies.length > 0) {
      message += `<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n`;
      for (let i = 0; i < userProxies.length; i++) {
        const proxy = userProxies[i];
        const isWorking = await testProxy(proxy);
        message += `–ü—Ä–æ–∫—Å–∏ ‚Ññ${i + 1}: ${isWorking ? '–†–∞–±–æ—Ç–∞–µ—Çüü¢' : '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Çüî¥'}\n`;
      }
    } else {
      message = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏.';
    }

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    const keyboard = {
      inline_keyboard: [[{ text: '–ú–æ–∏ –ø—Ä–æ–∫—Å–∏', callback_data: 'my_proxies' }]],
    };

    // –ò–∑–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: keyboard,
      parse_mode: 'HTML', // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function handleRentProxy(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const action = callbackQuery.data;
  const userId = callbackQuery.from.id;

  try {
    const result = await checkAuth(userId, ['user', 'admin']);

    if (result.permission) {
      let days;
      let price;

      if (action === 'rent_7_days') {
        days = 7;
        price = 8;
      } else if (action === 'rent_30_days') {
        days = 30;
        price = 25;
      } else {
        throw new Error('Invalid action');
      }

      const user = result.user;
      const proxy = await ProxyModel.findOne({ isFree: true });

      let confirmationMessage = ``;

      if (!proxy) {
        confirmationMessage += '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.';
      } else {
        if (user.balance < price) {
          confirmationMessage += '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.';
        } else {
          // –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏
          user.balance -= price;
          await user.save();

          const expirationDate = new Date();
          expirationDate.setDate(expirationDate.getDate() + days);

          // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –ø—Ä–æ–∫—Å–∏
          proxy.isFree = false;
          proxy.expirationDate = expirationDate;
          proxy.userTelegramId = userId;
          proxy.userId = user._id;

          await proxy.save();

          confirmationMessage += `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–∞ ${days} –¥–Ω–µ–π –∑–∞ ${price}$.`;
        }
      }

      const keyboard = {
        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'my_proxies' }]],
      };

      bot.editMessageText(confirmationMessage, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard,
        parse_mode: 'HTML',
      });
    } else {
      bot.editMessageText('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.', {
        chat_id: chatId,
        message_id: messageId,
      });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      chat_id: chatId,
      message_id: messageId,
    });
  }
}
