import checkAuth from '../db/middleware/checkAuth.js';
import UserModel from '../db/models/UserModel.js';
import ProxyModel from '../db/models/ProxyModel.js';
import BalanceTopUpModel from '../db/models/BalanceTopUpModel.js';
import ActivationModel from '../db/models/ActivationModel.js';
import TransactionModel from '../db/models/TransactionModel.js';

import { getTransactionsByTelegramId } from '../createTransaction.js';

import testProxy from '../bot/utils/proxyCheck.js';

import { formatter } from '../callbacks.js';
import { formatAmount } from '../bot/utils/formatters.js';

export async function handleAdminPanel(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const telegramId = callbackQuery.from.id;

  try {
    const result = await checkAuth(telegramId, 'admin');

    if (result.permission) {
      const declineMessage = '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:';
      const declineOptions = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_users' },
              { text: '–ü—Ä–æ–∫—Å–∏', callback_data: 'admin_proxies' },
            ],
            [
              { text: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', callback_data: 'admin_balance_top_ups' },
              { text: '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', callback_data: 'admin_transactions' },
            ],
            [
              { text: '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', callback_data: 'command_list' },
              { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'login_or_register' },
            ],
          ],
        },
      };
      bot.editMessageText(declineMessage, {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        ...declineOptions,
      });
    }

    if (!result) {
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

const chunkSize = 4000;

export async function handleAdminUsers(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const telegramId = callbackQuery.from.id;
  const data = callbackQuery.data;

  try {
    const result = await checkAuth(telegramId, 'admin');

    if (!result.permission) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.');
      return;
    }

    const userProxies = await UserModel.find();
    let messages = [];
    let message = '<b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n';

    userProxies.forEach((user, index) => {
      let userInfo = `<b>‚Ññ${index + 1} | ${user.role}:</b>\n`;
      userInfo += `<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> ${user.username} / ${user.firstName} \n`;
      userInfo += `<b>Telegram ID:</b> ${user.telegramId}\n`;
      userInfo += `<b>–ë–∞–ª–∞–Ω—Å:</b> ${user.balance}$\n`;
      userInfo += `<b>–†–µ—Ñ-–∫–æ–¥:</b> ${
        user.refCode ? `${user.refCode} | +${user.refEarnings}$` : '-'
      }\n`;
      userInfo += `<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ${formatter.format(user.createdAt)}\n\n`;

      if ((message + userInfo).length > chunkSize) {
        messages.push(message);
        message = '';
      }

      message += userInfo;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    message += `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${formatter.format(new Date())}`;
    messages.push(message);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
    if (data === 'admin_users') {
      const options = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: '–î–∞–ª–µ–µ', callback_data: 'admin_users_1' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }],
          ],
        },
      };

      await bot.editMessageText(messages[0], {
        chat_id: chatId,
        message_id: messageId,
        ...options,
      });
    } else {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
      const pageIndex = parseInt(data.split('_')[2], 10);
      const options = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            ...(pageIndex > 0
              ? [[{ text: '–ù–∞–∑–∞–¥', callback_data: `admin_users_${pageIndex - 1}` }]]
              : []),
            ...(pageIndex < messages.length - 1
              ? [[{ text: '–î–∞–ª–µ–µ', callback_data: `admin_users_${pageIndex + 1}` }]]
              : []),
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }],
          ],
        },
      };

      await bot.editMessageText(messages[pageIndex], {
        chat_id: chatId,
        message_id: messageId,
        ...options,
      });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function handleAdminProxies(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const telegramId = callbackQuery.from.id;
  const data = callbackQuery.data;

  try {
    const result = await checkAuth(telegramId, 'admin');

    if (!result.permission) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.');
      return;
    }

    const proxies = await ProxyModel.find().sort({ login: 1 });
    const users = await UserModel.find({
      telegramId: { $in: proxies.map((proxy) => proxy.userTelegramId) },
    });

    const usersMap = {};
    users.forEach((user) => {
      usersMap[user.telegramId] = user;
    });

    let messages = [];
    let message = '<b>–í—Å–µ –ø—Ä–æ–∫—Å–∏:</b>\n\n';

    proxies.forEach((proxy, index) => {
      let userName = proxy.isFree
        ? '–°–í–û–ë–û–î–ù–û'
        : `–ó–ê–ù–Ø–¢–û ${
            usersMap[proxy.userTelegramId]
              ? usersMap[proxy.userTelegramId].username
              : proxy.userTelegramId
          } ${getTimeRemaining(proxy.expirationDate)}`;

      let proxyInfo = `\n<b>–ü—Ä–æ–∫—Å–∏ ${proxy.login} - ${userName}</b>\n`;
      proxyInfo += `<b>Host:</b> <code>${proxy.hostIp}</code>\n`;
      proxyInfo += `<b>Socks –ø–æ—Ä—Ç:</b> <code>${proxy.socksPort}</code>\n`;
      proxyInfo += `<b>HTTP –ø–æ—Ä—Ç:</b><code> ${proxy.httpPort}</code>\n`;
      proxyInfo += `<b>–õ–æ–≥–∏–Ω:</b> <code>${proxy.login}</code>\n`;
      proxyInfo += `<b>–ü–∞—Ä–æ–ª—å:</b> <code>${proxy.password}</code>\n`;
      proxyInfo += `<b>–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–º–µ–Ω—ã IP:</b> <code>${proxy.changeIpUrl}</code>\n`;
      proxyInfo += proxy.expirationDate
        ? `–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${formatter.format(proxy.expirationDate)}\n`
        : ``;

      if ((message + proxyInfo).length > chunkSize) {
        messages.push(message);
        message = '';
      }

      message += proxyInfo;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    message += `\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${formatter.format(new Date())}`;
    messages.push(message);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
    if (data === 'admin_proxies') {
      const options = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: '–î–∞–ª–µ–µ', callback_data: 'admin_proxies_1' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }],
          ],
        },
      };

      await bot.editMessageText(messages[0], {
        chat_id: chatId,
        message_id: messageId,
        ...options,
      });
    } else {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
      const pageIndex = parseInt(data.split('_')[2], 10);
      const options = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            ...(pageIndex > 0
              ? [[{ text: '–ù–∞–∑–∞–¥', callback_data: `admin_proxies_${pageIndex - 1}` }]]
              : []),
            ...(pageIndex < messages.length - 1
              ? [[{ text: '–î–∞–ª–µ–µ', callback_data: `admin_proxies_${pageIndex + 1}` }]]
              : []),
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }],
          ],
        },
      };

      await bot.editMessageText(messages[pageIndex], {
        chat_id: chatId,
        message_id: messageId,
        ...options,
      });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

function getTimeRemaining(expirationDate) {
  if (!expirationDate) return '';

  const now = new Date();
  const diff = expirationDate - now;

  const days = Math.floor(Math.abs(diff) / (1000 * 60 * 60 * 24));
  const hours = Math.floor((Math.abs(diff) % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));

  if (diff >= 0) {
    if (days > 0) {
      return `${days} –¥–Ω. ${hours} —á–∞—Å.`;
    } else {
      return `${hours} —á–∞—Å.`;
    }
  } else {
    if (days > 0) {
      return `-${days} –¥–Ω. ${hours} —á–∞—Å.`;
    } else {
      return `-${hours} —á–∞—Å.`;
    }
  }
}

export async function handleAdminBalanceTopUps(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const telegramId = callbackQuery.from.id;

  try {
    const result = await checkAuth(telegramId, 'admin');

    if (result.permission) {
      const transactions = await BalanceTopUpModel.find().populate('userId');

      if (transactions.length === 0) {
        const noTransactionsMessage = '–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞.';
        const options = {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }]],
          },
        };
        bot.editMessageText(noTransactionsMessage, options);
        return;
      }

      let message = '–°–ø–∏—Å–æ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞:\n\n';
      transactions.forEach((transaction, index) => {
        message += `<b>‚Ññ: ${index + 1}</b>\n`;
        message += `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${transaction.userId.username}\n`;
        message += `<b>–°—É–º–º–∞:</b> ${formatAmount(transaction.amount)}\n`;
        transaction.refCode
          ? (message += `<b>–†–µ—Ñ–µ—Ä–∞–ª:</b> +${formatAmount(transaction.amount / 10)} ${
              transaction.refCode
            } \n`)
          : ``;
        message += `<b>–î–∞—Ç–∞:</b> ${transaction.createdAt}\n\n`;
      });

      const options = {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }]],
        },
      };
      bot.editMessageText(message, options);
    }

    if (!result) {
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// export async function handleAssignProxy(bot, callbackQuery) {
//   const chatId = callbackQuery.message.chat.id;
//   const messageId = callbackQuery.message.message_id;
//   const telegramId = callbackQuery.from.id;

//   try {
//     const result = await checkAuth(telegramId, 'admin');

//     if (result.permission) {
//       const proxies = await ProxyModel.find({ isFree: true });

//       if (proxies.length === 0) {
//         bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—ã–¥–∞—á–∏.');
//         return;
//       }

//       const proxyButtons = proxies.map((proxy) => ({
//         text: `–í—ã–¥–∞—Ç—å –ø—Ä–æ–∫—Å–∏ (${proxy.login})`,
//         callback_data: `admin_assign_proxy_days_${proxy._id}`,
//       }));

//       const options = {
//         parse_mode: 'HTML',
//         reply_markup: {
//           inline_keyboard: [proxyButtons, [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_proxies' }]],
//         },
//       };

//       // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
//       const currentMessage = callbackQuery.message.text;
//       const newMessage = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—ã–¥–∞—á–∏:';
//       if (currentMessage !== newMessage) {
//         await bot.editMessageText(newMessage, {
//           chat_id: chatId,
//           message_id: messageId,
//           ...options,
//         });
//       }
//     } else {
//       bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.');
//     }
//   } catch (err) {
//     console.error('–û—à–∏–±–∫–∞:', err.message);
//     bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
//   }
// }

// export async function handleAssignProxyDays(bot, callbackQuery) {
//   const chatId = callbackQuery.message.chat.id;
//   const messageId = callbackQuery.message.message_id;
//   const proxyId = callbackQuery.data.split('_')[3]; // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–∫—Å–∏ –∏–∑ callback_data

//   try {
//     const result = await checkAuth(callbackQuery.from.id, 'admin');

//     if (result.permission) {
//       // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
//       const dayButtons = [];
//       for (let i = 1; i <= 30; i++) {
//         dayButtons.push({ text: `${i} –¥–Ω–µ–π`, callback_data: `admin_assign_proxy_${proxyId}_${i}` });
//       }

//       const options = {
//         parse_mode: 'HTML',
//         reply_markup: {
//           inline_keyboard: [dayButtons, [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_proxies' }]],
//         },
//       };

//       // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
//       const currentMessage = callbackQuery.message.text;
//       const newMessage = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–æ–∫—Å–∏:';
//       if (currentMessage !== newMessage) {
//         await bot.editMessageText(newMessage, {
//           chat_id: chatId,
//           message_id: messageId,
//           ...options,
//         });
//       }
//     } else {
//       bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.');
//     }
//   } catch (err) {
//     console.error('–û—à–∏–±–∫–∞:', err.message);
//     bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
//   }
// }

export async function checkAllProxies(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const telegramId = callbackQuery.from.id;
  const messageId = callbackQuery.message.message_id;

  try {
    const result = await checkAuth(telegramId, 'admin');

    if (!result.permission) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.');
      return;
    }

    const proxies = await ProxyModel.find();

    let message = '';
    if (proxies.length > 0) {
      message += `<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏:</b>\n\n`;
      for (let i = 0; i < proxies.length; i++) {
        const proxy = proxies[i];
        const isWorking = await testProxy(proxy);
        message += `–ü—Ä–æ–∫—Å–∏ ${proxy.login}: ${isWorking ? '–†–∞–±–æ—Ç–∞–µ—Çüü¢' : '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Çüî¥'}\n`;
      }
    } else {
      message = '–ù–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.';
    }

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    const keyboard = {
      inline_keyboard: [[{ text: '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_panel' }]],
    };

    // –ò–∑–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: keyboard,
      parse_mode: 'HTML',
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function handleViewAllTransactions(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const telegramId = callbackQuery.from.id;
  const data = callbackQuery.data;

  try {
    const result = await checkAuth(telegramId, 'admin');

    if (!result.permission) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.');
      return;
    }

    const transactions = await TransactionModel.find().populate('userId').sort({ createdAt: -1 });

    await getTransactionsByTelegramId(transactions);

    let messages = [];
    let message = '<b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b>\n\n';

    transactions.forEach((transaction, index) => {
      const date = formatter.format(new Date(transaction.createdAt));
      const username = transaction.userId.username || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
      let transactionInfo = `<b><a href="${transaction.pageUrl}">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ‚Ññ${index + 1} | ${
        transaction.invoiceId
      }</a></b>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\n–°—É–º–º–∞: ${transaction.amount}; –°—Ç–∞—Ç—É—Å: ${
        transaction.status
      }; ${date}\n\n`;

      if ((message + transactionInfo).length > chunkSize) {
        messages.push(message);
        message = '';
      }

      message += transactionInfo;
    });

    if (message) {
      messages.push(message);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
    if (data === 'admin_transactions') {
      const options = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: '–î–∞–ª–µ–µ', callback_data: 'admin_transactions_1' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }],
          ],
        },
      };

      await bot.editMessageText(messages[0], {
        chat_id: chatId,
        message_id: messageId,
        ...options,
      });
    } else {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
      const pageIndex = parseInt(data.split('_')[2], 10);
      const options = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            ...(pageIndex > 0
              ? [[{ text: '–ù–∞–∑–∞–¥', callback_data: `admin_transactions_${pageIndex - 1}` }]]
              : []),
            ...(pageIndex < messages.length - 1
              ? [[{ text: '–î–∞–ª–µ–µ', callback_data: `admin_transactions_${pageIndex + 1}` }]]
              : []),
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }],
          ],
        },
      };

      await bot.editMessageText(messages[pageIndex], {
        chat_id: chatId,
        message_id: messageId,
        ...options,
      });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function handleAdminCommandList(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const telegramId = callbackQuery.from.id;

  try {
    const result = await checkAuth(telegramId, 'admin');

    if (result.permission) {
      const commandList = `
<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>

/freeproxy [login] [password] [changeiplink] - –û—Å–≤–æ–±–æ–¥–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.\n
/giveproxy [login] [userId] [days] - –í—ã–¥–∞—Ç—å –ø—Ä–æ–∫—Å–∏.\n
/addproxy [proxyDetails] - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏.\n
/allnoproxy [MESSAGE] - –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏.\n
/allproxy [MESSAGE] - –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —Å –ø—Ä–æ–∫—Å–∏.\n
/allusers [MESSAGE] - –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n
/notifyusers - –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n
/updateproxypass [login] [password] [changeiplink] - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏.\n
/updateproxyduration [login] [+/-days] - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏.\n
/updateproxyprice [week/month price] - –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –ø—Ä–æ–∫—Å–∏.\n
/updateuserbalance [userId +/-amount] - –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n
/updateuserbonus [userId +/-amount] - –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞—Ä–æ–±–æ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`;
      const keyboard = {
        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }]],
      };

      await bot.editMessageText(commandList, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard,
        parse_mode: 'HTML',
      });
    } else {
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

export async function handleTrackPanel(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const telegramId = callbackQuery.from.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (admin –∏–ª–∏ traf)
    const result = await checkAuth(telegramId, ['admin', 'traf']);
    if (!result.permission) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    const activations = await ActivationModel.find({ referrerTelegramId: telegramId }).sort({
      activatedAt: -1,
    });

    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    let messages = [];
    let message = `<b>–¢—Ä—ç–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è ${telegramId}:</b>\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    activations.forEach((activation, index) => {
      let activationInfo = `\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${
        activation.activatedUsername || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
      } (${activation.activatedUserId})\n`;
      activationInfo += `<b>–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b> ${new Date(
        activation.activatedAt,
      ).toLocaleString()}\n`;

      if ((message + activationInfo).length > chunkSize) {
        messages.push(message);
        message = '';
      }

      message += activationInfo;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    messages.push(message);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
    if (data === 'track_panel') {
      const totalActivations = activations.length;
      const options = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: '–î–∞–ª–µ–µ', callback_data: 'track_panel_1' }],
            [
              { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'track_panel' },
              { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'login_or_register' },
            ],
          ],
        },
      };

      await bot.editMessageText(
        `${
          messages[0]
        }\n\n<b>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b> ${totalActivations} \n\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${formatter.format(
          new Date(),
        )}`,
        {
          chat_id: chatId,
          message_id: messageId,
          ...options,
        },
      );
    } else {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
      const pageIndex = parseInt(data.split('_')[2], 10);
      const options = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            ...(pageIndex > 0
              ? [{ text: '–ù–∞–∑–∞–¥', callback_data: `track_panel_${pageIndex - 1}` }]
              : []),
            ...(pageIndex < messages.length - 1
              ? [{ text: '–î–∞–ª–µ–µ', callback_data: `track_panel_${pageIndex + 1}` }]
              : []),
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'login_or_register' }],
          ],
        },
      };

      await bot.editMessageText(messages[pageIndex], {
        chat_id: chatId,
        message_id: messageId,
        ...options,
      });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä—ç–∫–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:', err.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
