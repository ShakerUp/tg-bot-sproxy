import UserModel from '../db/models/UserModel.js';
import TransactionModel from '../db/models/TransactionModel.js';

import checkAuth from '../db/middleware/checkAuth.js';
import { createTransaction, getTransactionsByTelegramId } from '../createTransaction.js';

import { formatter } from '../callbacks.js';
import { formatAmount } from '../bot/utils/formatters.js';

export const handleMyBalance = async (bot, callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const telegramId = callbackQuery.from.id;
  const messageId = callbackQuery.message.message_id;

  try {
    const result = await checkAuth(telegramId, ['admin', 'user']);
    if (result.permission) {
      const user = result.user;

      if (!user) {
        bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const transactions = await TransactionModel.find({ telegramId });
      await getTransactionsByTelegramId(transactions);

      let message = `<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${user.balance}$\n\n`;
      if (transactions.length > 0) {
        message += `<b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b>\n\n`;
        transactions.forEach((transaction, index) => {
          const date = formatter.format(new Date(transaction.createdAt));
          message += `<b><a href="${transaction.pageUrl}">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ‚Ññ${index + 1} | ${
            transaction.invoiceId
          }</a></b>\n–°—É–º–º–∞: ${formatAmount(transaction.amount)}; –°—Ç–∞—Ç—É—Å: ${
            transaction.status
          }; ${date}\n\n`;
        });
      } else {
        message += '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n';
      }

      message += `\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${formatter.format(new Date())}`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'topup_balance' },
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'my_balance' },
          ],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'login_or_register' }],
        ],
      };

      bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: keyboard,
      });
    } else {
      bot.editMessageText('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.', {
        chat_id: chatId,
        message_id: messageId,
      });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

export const handleTopupBalance = async (bot, callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const telegramId = callbackQuery.from.id;
  const messageId = callbackQuery.message.message_id;

  try {
    const result = await checkAuth(telegramId, ['admin', 'user']);
    if (result.permission) {
      const keyboard = {
        inline_keyboard: [
          [
            { text: '1$', callback_data: 'topup_1' },
            { text: '8$', callback_data: 'topup_8' },
            { text: '25$', callback_data: 'topup_25' },
          ],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'my_balance' }],
        ],
      };

      bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard,
      });
    } else {
      bot.editMessageText('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.', {
        chat_id: chatId,
        message_id: messageId,
      });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

export const handleTopupBalance8 = async (bot, callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const telegramId = callbackQuery.from.id;
  const messageId = callbackQuery.message.message_id;

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramId
    const user = await UserModel.findOne({ telegramId });

    if (!user) {
      bot.editMessageText('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
        chat_id: chatId,
        message_id: messageId,
      });
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 8$
    const transaction = await createTransaction(
      user._id, // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      user.telegramId, //–¢–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏ —é–∑–µ—Ä–∞
      800, // –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∫–æ–ø–µ–π–∫–∞—Ö (8$ = 800 –∫–æ–ø–µ–µ–∫)
      840, // –ö–æ–¥ –≤–∞–ª—é—Ç—ã (980 - –≥—Ä–∏–≤–Ω–∞)
      120, //–í—Ä–µ–º—è –≤ —Å–µ–∫—É–¥–∞—Ö –¥–µ–π—Å—Ç–∏—è
      '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ SimpleProxy', // –ù–æ–º–µ—Ä —á–µ–∫–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
      '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 8$', // –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    bot.editMessageText(
      `<b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b><a href="${transaction.pageUrl}">–æ–ø–ª–∞—Ç–∏—Ç–µ 8$.</a></b> –≤ —Ç–µ—á–µ–Ω–∏–∏ <b>${transaction.validity}</b> —Å–µ–∫—É–Ω–¥.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É <b>"–ú–æ–π –±–∞–ª–∞–Ω—Å"</b> –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.`,
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[{ text: 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', callback_data: 'my_balance' }]],
        },
      },
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      chat_id: chatId,
      message_id: messageId,
    });
  }
};

export const handleTopupBalance1 = async (bot, callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const telegramId = callbackQuery.from.id;
  const messageId = callbackQuery.message.message_id;

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramId
    const user = await UserModel.findOne({ telegramId });

    if (!user) {
      bot.editMessageText('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
        chat_id: chatId,
        message_id: messageId,
      });
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 8$
    const transaction = await createTransaction(
      user._id, // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      user.telegramId, //–¢–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏ —é–∑–µ—Ä–∞
      100, // –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∫–æ–ø–µ–π–∫–∞—Ö (8$ = 800 –∫–æ–ø–µ–µ–∫)
      840, // –ö–æ–¥ –≤–∞–ª—é—Ç—ã (980 - –≥—Ä–∏–≤–Ω–∞)
      120, //–í—Ä–µ–º—è –≤ —Å–µ–∫—É–¥–∞—Ö –¥–µ–π—Å—Ç–∏—è
      '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ SimpleProxy', // –ù–æ–º–µ—Ä —á–µ–∫–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
      '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 1$', // –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    bot.editMessageText(
      `<b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b><a href="${transaction.pageUrl}">–æ–ø–ª–∞—Ç–∏—Ç–µ 1$.</a></b> –≤ —Ç–µ—á–µ–Ω–∏–∏ <b>${transaction.validity}</b> —Å–µ–∫—É–Ω–¥.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É <b>"–ú–æ–π –±–∞–ª–∞–Ω—Å"</b> –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.`,
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[{ text: 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', callback_data: 'my_balance' }]],
        },
      },
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      chat_id: chatId,
      message_id: messageId,
    });
  }
};

export const handleTopupBalance25 = async (bot, callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const telegramId = callbackQuery.from.id;
  const messageId = callbackQuery.message.message_id;

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramId
    const user = await UserModel.findOne({ telegramId });

    if (!user) {
      bot.editMessageText('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
        chat_id: chatId,
        message_id: messageId,
      });
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 8$
    const transaction = await createTransaction(
      user._id, // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      user.telegramId, //–¢–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏ —é–∑–µ—Ä–∞
      2500, // –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∫–æ–ø–µ–π–∫–∞—Ö (8$ = 800 –∫–æ–ø–µ–µ–∫)
      840, // –ö–æ–¥ –≤–∞–ª—é—Ç—ã (980 - –≥—Ä–∏–≤–Ω–∞)
      120, //–í—Ä–µ–º—è –≤ —Å–µ–∫—É–¥–∞—Ö –¥–µ–π—Å—Ç–∏—è
      '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ SimpleProxy', // –ù–æ–º–µ—Ä —á–µ–∫–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
      '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 25$', // –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    bot.editMessageText(
      `<b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b><a href="${transaction.pageUrl}">–æ–ø–ª–∞—Ç–∏—Ç–µ 25$.</a></b> –≤ —Ç–µ—á–µ–Ω–∏–∏ <b>${transaction.validity}</b> —Å–µ–∫—É–Ω–¥.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É <b>"–ú–æ–π –±–∞–ª–∞–Ω—Å"</b> –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.`,
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[{ text: 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', callback_data: 'my_balance' }]],
        },
      },
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      chat_id: chatId,
      message_id: messageId,
    });
  }
};
