import UserModel from '../db/models/UserModel.js';
import TransactionModel from '../db/models/TransactionModel.js';
import PriceModel from '../db/models/PriceModel.js';

import Decimal from 'decimal.js';

import mongoose from 'mongoose';

import checkAuth from '../db/middleware/checkAuth.js';
import { createTransaction, getTransactionsByTelegramId } from '../createTransaction.js';

import { formatter } from '../callbacks.js';
import { formatAmount } from '../bot/utils/formatters.js';

export const handleMyBalance = async (bot, callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const telegramId = callbackQuery.from.id;
  const messageId = callbackQuery.message.message_id;

  try {
    const result = await checkAuth(telegramId, ['admin', 'user']);
    if (result.permission) {
      const user = result.user;

      if (!user) {
        bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const transactions = await TransactionModel.find({ telegramId });
      await getTransactionsByTelegramId(transactions);

      let message = `<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${user.balance}$\n\n`;
      if (transactions.length > 0) {
        message += `<b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b>\n\n`;
        transactions.forEach((transaction, index) => {
          const date = formatter.format(new Date(transaction.createdAt));
          message += `<b><a href="${transaction.pageUrl}">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ‚Ññ${index + 1} | ${
            transaction.invoiceId
          }</a></b>\n–°—É–º–º–∞: ${formatAmount(transaction.amount)}; –°—Ç–∞—Ç—É—Å: ${
            transaction.status
          }; ${date}\n\n`;
        });
      } else {
        message += '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n';
      }

      message += `\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${formatter.format(new Date())}`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'topup_balance' },
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'my_balance' },
          ],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'login_or_register' }],
        ],
      };

      bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: keyboard,
      });
    } else {
      bot.editMessageText('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.', {
        chat_id: chatId,
        message_id: messageId,
      });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

const waitingForTopupAmount = new Set();
const topupInputHandlers = {};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /topup
export const handleTopupBalance = async (bot, callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const telegramId = callbackQuery.from.id;
  const messageId = callbackQuery.message.message_id;

  waitingForTopupAmount.delete(chatId);
  if (topupInputHandlers[chatId]) {
    bot.removeListener('message', topupInputHandlers[chatId]);
    delete topupInputHandlers[chatId];
  }

  try {
    const result = await checkAuth(telegramId, ['admin', 'user']);
    if (result.permission) {
      const prices = await PriceModel.find({}).sort({ currency: 1 });
      const buttons = prices.map((price) => ({
        text: `${price.amount}$`,
        callback_data: `topup_${price.description}`,
      }));

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const keyboard = {
        inline_keyboard: [
          buttons, // –í—Å–µ –∫–Ω–æ–ø–∫–∏ —Å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
          [{ text: 'üí∏ –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—É–º–º–∞', callback_data: 'topup_custom' }], // –ö–Ω–æ–ø–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'my_balance' }], // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        ],
      };

      bot.editMessageText(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:\n\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π - –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É.',
        {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: keyboard,
        },
      );
    } else {
      bot.editMessageText('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.', {
        chat_id: chatId,
        message_id: messageId,
      });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

export const handleTopupBalanceGeneric = async (bot, callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const telegramId = callbackQuery.from.id;
  const messageId = callbackQuery.message.message_id;
  const action = callbackQuery.data.split('_')[1]; // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ callback_data

  try {
    const user = await UserModel.findOne({ telegramId });

    if (!user) {
      bot.editMessageText('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
        chat_id: chatId,
        message_id: messageId,
      });
      return;
    }

    const price = await PriceModel.findOne({ description: action });

    if (!price) {
      bot.editMessageText('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.', {
        chat_id: chatId,
        message_id: messageId,
      });
      return;
    }

    const transaction = await createTransaction(
      user._id,
      user.telegramId,
      price.amount * 100,
      price.currency,
      120,
      '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ SimpleProxy',
      `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${price.amount}$`,
    );

    bot.editMessageText(
      `<b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b><a href="${transaction.pageUrl}">–æ–ø–ª–∞—Ç–∏—Ç–µ ${price.amount}$.</a></b> –≤ —Ç–µ—á–µ–Ω–∏–∏ <b>${transaction.validity}</b> —Å–µ–∫—É–Ω–¥.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É <b>"–ú–æ–π –±–∞–ª–∞–Ω—Å"</b> –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.`,
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[{ text: 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', callback_data: 'my_balance' }]],
        },
      },
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      chat_id: chatId,
      message_id: messageId,
    });
  }
};

export async function handleTopupCustom(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const telegramId = callbackQuery.from.id;

  try {
    const user = await UserModel.findOne({ telegramId });

    if (user) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—É–º–º—ã
      waitingForTopupAmount.add(chatId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—É–º–º—ã
      const message = '<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π):</b>';
      const options = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'topup_balance' }]],
        },
      };

      await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        ...options,
      });

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—É–º–º—ã
      const handleTopupAmountInput = async (msg) => {
        if (waitingForTopupAmount.has(chatId) && msg.chat.id === chatId && msg.text) {
          const amountStr = msg.text.trim();

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ —Å—É–º–º—ã
          if (isNaN(amountStr) || amountStr <= 0 || !/^(\d+(\.\d{1})?)$/.test(amountStr)) {
            return bot.sendMessage(
              chatId,
              '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç X.0 –∏–ª–∏ X.X, –≥–¥–µ X - —Ü–∏—Ñ—Ä—ã.',
            );
          }

          const amount = new Decimal(amountStr);
          if (amount.lte(0)) {
            return bot.sendMessage(
              chatId,
              '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—É–º–º–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.',
            );
          }

          // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ 840 (USD)
          const currency = 840;

          // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          const transaction = await createTransaction(
            user._id,
            user.telegramId,
            amount.mul(100).toNumber(), // –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            currency,
            120,
            '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ SimpleProxy',
            `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount.toFixed(1)}$`,
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
          await bot.editMessageText(
            `<b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b><a href="${
              transaction.pageUrl
            }">–æ–ø–ª–∞—Ç–∏—Ç–µ ${amount.toFixed(1)}$</a></b> –≤ —Ç–µ—á–µ–Ω–∏–µ <b>${
              transaction.validity
            }</b> —Å–µ–∫—É–Ω–¥.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É <b>"–ú–æ–π –±–∞–ª–∞–Ω—Å"</b> –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.`,
            {
              chat_id: chatId,
              message_id: callbackQuery.message.message_id,
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [[{ text: 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', callback_data: 'my_balance' }]],
              },
            },
          );

          waitingForTopupAmount.delete(chatId); // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
          bot.removeListener('message', handleTopupAmountInput); // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞
          delete topupInputHandlers[chatId];
        }
      };

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—É–º–º—ã
      topupInputHandlers[chatId] = handleTopupAmountInput;
      bot.on('message', handleTopupAmountInput);
    } else {
      bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err.message);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
